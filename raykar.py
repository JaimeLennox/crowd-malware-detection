import data
import threshold
import numpy as np


def run_raykar(engine_count, data_dict, type_dict):

    print "Raykar Method:"

    # Initialise by majority voting
    mu = threshold.majority_vote(data_dict)

    # Initialisation
    R = engine_count
    N = len(data_dict)

    a1 = 3
    a2 = 2
    b1 = 3
    b2 = 2

    p1 = 2
    p2 = 2

    sensitivity = np.zeros(R)
    specificity = np.zeros(R)

    muDiff = 1

    while muDiff > 0:
        # EM iteration
        for j in range(R):
            sumMu = sum([v if data_dict[k][j] < 2 else 0 for k, v in mu.iteritems()])
            sumNegMu = sum([(1 - v) if data_dict[k][j] < 2 else 0 for k, v in mu.iteritems()])

            sumMuY = sum([v * data_dict[k][j] if data_dict[k][j] < 2 else 0 for k, v in mu.iteritems()])
            sumNegMuY = sum([(1 - v) * (1 - data_dict[k][j]) if data_dict[k][j] < 2 else 0 for k, v in mu.iteritems()])

            sensitivity[j] = (a1 - 1 + sumMuY) / float(a1 + a2 - 2 + sumMu)
            specificity[j] = (b1 - 1 + sumNegMuY) / float(b1 + b2 - 2 + sumNegMu)

        sumMu = sum([v for v in mu.values()])
        prevalence = (p1 - 1 + sumMu) / float(p1 + p2 - 2 + N)

        difference = dict(mu)

        for i in data_dict:

            loga = 0
            logb = 0

            indices = [index for index, x in enumerate(data_dict[i]) if x < 2]

            for j in indices:
                y = data_dict[i][j]
                loga += np.log((sensitivity[j] ** y) * ((1 - sensitivity[j]) ** (1 - y)))
                logb += np.log((specificity[j] ** (1 - y)) * ((1 - specificity[j]) ** y))

            a = np.exp(loga)
            b = np.exp(logb)

            mu[i] = int(round((a * prevalence) / (a * prevalence + (b * (1 - prevalence)))))
            difference[i] = abs(difference[i] - mu[i])

        muDiff = sum(difference.values())

        accuracy = data.correct_count(mu, type_dict) / float(N)
        print accuracy


if __name__ == "__main__":
    engine_count, data_dict, type_dict = data.get_ransomware_data()
    run_raykar(engine_count, data_dict, type_dict)











