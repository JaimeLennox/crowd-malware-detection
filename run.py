import numpy as np
import os
from argparse import ArgumentParser

from algorithms import threshold, raykar, welinder_perona
from utils import data

if __name__ == "__main__":
    algorithm_choices = ["threshold", "majority_vote", "raykar_core", "raykar_supervised", "raykar_spammers", "raykar_annotators", "welinder_perona"]

    parser = ArgumentParser()

    parser.add_argument("-a", "--algorithm", choices=algorithm_choices, help="algorithm to use")
    parser.add_argument("-g", "--show-graphs", action="store_true", help="show graphs")
    parser.add_argument("-d", "--dataset", required=True, nargs=3, help="<engines file> <malware_file> <goodware_file>")
    parser.add_argument("-v", "--verbose", action="store_true", help="increase output verbosity")
    parser.add_argument("-t", "--train-test", action="store_true", help="use training/test data")
    parser.add_argument("-s", "--save", action="store_true", help="use saved data/save calculated data")

    args = parser.parse_args()

    engine_count, data_dict, type_dict = data.get_path_data(*args.dataset)
    raykar = raykar.Raykar(
        engine_count, data_dict, type_dict,
        show_graphs=args.show_graphs if "show_graphs" in args else False,
        verbose=args.verbose,
        train_test=args.train_test if "train_test" in args else False,
        save=args.save
    )
    welinder_perona = welinder_perona.WelinderPerona(engine_count, data_dict, type_dict, train_test=args.train_test)
    threshold = threshold.Threshold(data_dict, type_dict)

    algorithms = {
        "threshold": threshold.run_threshold,
        "majority_vote": threshold.run_majority_vote,
        "raykar_core": raykar.run_core_method,
        "raykar_supervised": raykar.run_semi_supervised_method,
        "raykar_spammers": raykar.run_spammers_method,
        "raykar_annotators": raykar.run_annotators_method,
        "welinder_perona": welinder_perona.run
    }

    if "algorithm" in args:
        algorithms[args.algorithm]()
    else:
        results, prob_results = raykar.run_core_method()
        data.roc_results(prob_results[-1], type_dict)



