from argparse import ArgumentParser

from algorithms import threshold, raykar, welinder_perona
from utils import data


if __name__ == "__main__":
    algorithm_choices = ["threshold", "majority_vote", "raykar_core", "raykar_supervised", "raykar_spammers", "welinder_perona"]

    parser = ArgumentParser()

    subparsers = parser.add_subparsers()
    roc = subparsers.add_parser("roc", help="roc graph")
    roc.add_argument("-d", "--dataset", choices=["new", "old", "ransomware"], required=True, help="dataset to use")
    roc.add_argument("-v", "--verbose", action="store_true", help="increase output verbosity")

    algorithm = subparsers.add_parser("algorithm")
    algorithm.add_argument("-a", "--algorithm", choices=algorithm_choices, help="algorithm to use")
    algorithm.add_argument("-g", "--show-graphs", action="store_true", help="show graphs")
    algorithm.add_argument("-d", "--dataset", choices=["new", "old", "ransomware"], required=True, help="dataset to use")
    algorithm.add_argument("-v", "--verbose", action="store_true", help="increase output verbosity")

    args = parser.parse_args()

    datasets = {
        "new": data.get_new_large_data,
        "old": data.get_old_large_data,
        "ransomware": data.get_ransomware_data
    }

    engine_count, data_dict, type_dict = datasets[args.dataset]()
    raykar = raykar.Raykar(engine_count, data_dict, type_dict, show_graphs=args.show_graphs if "show_graphs" in args else False, verbose=args.verbose)
    welinder_perona = welinder_perona.WelinderPerona(engine_count, data_dict, type_dict)
    threshold = threshold.Threshold(data_dict, type_dict)

    algorithms = {
        "threshold": threshold.run_threshold,
        "majority_vote": threshold.run_majority_vote,
        "raykar_core": raykar.run_core_method,
        "raykar_supervised": raykar.run_semi_supervised_method,
        "raykar_spammers": raykar.run_spammers_method,
        "welinder_perona": welinder_perona.run
    }

    if "algorithm" in args:
        algorithms[args.algorithm]()
    else:
        threshold_results = [data.roc_results(threshold.run_threshold(i), type_dict) for i in range(3, 8, 1)]
        raykar_results = [data.roc_results(results, type_dict) for results in raykar.run_core_method()]
        data.roc_graph(threshold_results, raykar_results)



