from utils import data


class Threshold:

    def __init__(self, data_dict, type_dict):
        self._data_dict = data_dict
        self._type_dict = type_dict

    # returns a dict of hash to vote (0 for goodware, 1 for malware)
    def threshold(self, malware_threshold):
        results = {}

        for hash in self._data_dict:
            report = self._data_dict[hash]

            if report.count(1) >= malware_threshold:
                results[hash] = 1
            else:
                results[hash] = 0

        return results

    # dynamic threshold of half the number of labelling engines
    def majority_vote(self):
        results = {}

        for hash in self._data_dict:
            report = self._data_dict[hash]

            if report.count(1) >= report.count(0):
                results[hash] = 1
            else:
                results[hash] = 0

        return results

    def run_threshold(self, malware_threshold=5):
        results = self.threshold(malware_threshold)
        accuracy = data.correct_count(results, self._type_dict) / float(len(self._data_dict))
        error_rate, fpr, fnr = data.calculate_results(results, self._type_dict)

        print "Threshold:", malware_threshold
        print "Accuracy:", accuracy
        print "Error Rate:", error_rate
        print "False Positive Rate", fpr
        print "False Negative Rate", fnr

    def run_majority_vote(self):
        # Majority Vote
        results = self.majority_vote()
        accuracy = data.correct_count(results, self._type_dict) / float(len(self._data_dict))
        error_rate, fpr, fnr = data.calculate_results(results, self._type_dict)

        print "Majority Vote:"
        print "Accuracy:", accuracy
        print "Error Rate:", error_rate
        print "False Positive Rate", fpr
        print "False Negative Rate", fnr
