import random

from utils import data


class WelinderPerona:

    def __init__(self, engine_count, data_dict, type_dict):
        self._engine_count = engine_count
        self._data_dict = data_dict
        self._type_dict = type_dict

    def run(self):
        # Initialisation
        M = self._engine_count
        N = len(self._data_dict)

        buckets = 10

        n = N / buckets

        unseen = dict(self._data_dict)
        seen = dict()

        all_annotators = range(M)
        used_annotators = set()
        experts = []
        bot = []

        zeta_prior = 0.5

        posterior = {}
        parameters = []

        labels = {key: [] for key in self._data_dict}

        cutoff = 20
        variance_threshold = 1

        for i in range(buckets):
            # Transfer n data items to seen
            count = n
            for key in unseen.keys():
                count -= 1

                seen[key] = unseen[key]
                del unseen[key]

                if count == 0:
                    break

            posterior = {}

            for k, v in seen.iteritems():
                # TODO: Compute p(z_k)
                posterior[k] = zeta_prior

                while posterior[k] < 0.9 and labels[k] < cutoff:
                    # Get label from random expert, else from random annotator not in bot
                    annotator = random.choice(experts) if experts else random.choice([i for i in all_annotators if i not in bot])
                    used_annotators.add(annotator)
                    labels[k].append(v[annotator])

                    # TODO: Update p(z_k)
                    posterior[k] = 0.5

            experts = []
            bot = []

            for annotator in used_annotators:
                # TODO: Update annotator parameters
                parameters[annotator] = 0.5

                # TODO: calculate variance of a_j using multivariate Gaussian
                variance = 2

                if variance < variance_threshold:
                    # TODO: if a[j] satisfies expert criterion
                    if parameters[annotator] == 0.5:
                        experts.append(annotator)
                    else:
                        bot.append(annotator)

        print posterior
        print parameters

































